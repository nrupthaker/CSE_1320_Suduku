/* Parts =
  1. Input Handling
  2. Sudoku Solver Aspect
  3. Final Output and Execution

This is the Sudoku Solver Aspect

Be sure to push your assigned part so we can merge it with main! Thats it!

*/

/* Solve the Sudoku puzzle using backtracking */
#include <stdio.h>
#include <stdbool.h>

#define N 9

bool isSafe(int grid[N][N], int row, int col, int num) {
    // Check if the number is already present in the row or column
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num || grid[x][col] == num) {
            return false;
        }
    }

    // Check if the number is already present in the 3x3 grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

bool findEmptyLocation(int grid[N][N], int *row, int *col) {
    for (*row = 0; *row < N; (*row)++) {
        for (*col = 0; *col < N; (*col)++) {
            if (grid[*row][*col] == 0) {
                return true;
            }
        }
    }
    return false;
}

bool solveSudoku(int grid[N][N]) {
    int row, col;

    if (!findEmptyLocation(grid, &row, &col)) {
        return true; // Puzzle solved
    }

    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku(grid)) {
                return true;
            }
            grid[row][col] = 0; // Undo the assignment
        }
    }

    return false; // No solution found
}

void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            printf("%2d", grid[row][col]);
        }
        printf("\n");
    }
}

int main() {
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(grid)) {
        printf("Solution:\n");
        printGrid(grid);
    } else {
        printf("No solution exists\n");
    }

    return 0;
}
int solve_sudoku(int i, int j)
{
    if (i == 9)
    {
        i = 0;
        if (++j == 9)
            return 1; // Sudoku solved successfully
    }
    if (known[i][j])
        return solve_sudoku(i + 1, j);

    for (int n = 1; n <= 9; n++)
    {
        if (!(rows[i] & bits[n]) && !(cols[j] & bits[n]) && !(squares[square(i, j)] & bits[n]))
        {
            set_cell(i, j, n);
            if (solve_sudoku(i + 1, j))
                return 1; // Solution found
            clear_cell(i, j);
        }
    }
    return 0; // No solution found
}
